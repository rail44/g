// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const decrementBalance = `-- name: DecrementBalance :exec
UPDATE balances SET balance = balance - $2 WHERE account=$1
`

type DecrementBalanceParams struct {
	Account int64
	Amount  string
}

func (q *Queries) DecrementBalance(ctx context.Context, arg DecrementBalanceParams) error {
	_, err := q.db.ExecContext(ctx, decrementBalance, arg.Account, arg.Amount)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, inserted_at, updated_at, name FROM accounts WHERE id=$1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.InsertedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getBalance = `-- name: GetBalance :one
SELECT balance FROM balances WHERE account=$1 LIMIT 1
`

func (q *Queries) GetBalance(ctx context.Context, account int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getBalance, account)
	var balance string
	err := row.Scan(&balance)
	return balance, err
}

const getTransactions = `-- name: GetTransactions :many
SELECT
  inserted_at,

  mints.id AS mint_id,
  mints.amount AS mint_amount,

  spends.id AS spend_id,
  spends.amount AS spend_amount,

  transfers.id AS transfer_id,
  transfers.amount AS transfer_amount,
  transfers.recipient AS transfer_recipient
FROM transactions
LEFT OUTER JOIN mints ON transactions.mint=mints.id
LEFT OUTER JOIN spends ON transactions.spend=spends.id
LEFT OUTER JOIN transfers ON transactions.transfer=transfers.id
WHERE account=$1 ORDER BY inserted_at ASC
`

type GetTransactionsRow struct {
	InsertedAt        time.Time
	MintID            sql.NullInt64
	MintAmount        sql.NullString
	SpendID           sql.NullInt64
	SpendAmount       sql.NullString
	TransferID        sql.NullInt64
	TransferAmount    sql.NullString
	TransferRecipient sql.NullInt64
}

func (q *Queries) GetTransactions(ctx context.Context, account int64) ([]GetTransactionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransactions, account)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionsRow
	for rows.Next() {
		var i GetTransactionsRow
		if err := rows.Scan(
			&i.InsertedAt,
			&i.MintID,
			&i.MintAmount,
			&i.SpendID,
			&i.SpendAmount,
			&i.TransferID,
			&i.TransferAmount,
			&i.TransferRecipient,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementBalance = `-- name: IncrementBalance :exec
UPDATE balances SET balance = balance + $2 WHERE account=$1
`

type IncrementBalanceParams struct {
	Account int64
	Amount  string
}

func (q *Queries) IncrementBalance(ctx context.Context, arg IncrementBalanceParams) error {
	_, err := q.db.ExecContext(ctx, incrementBalance, arg.Account, arg.Amount)
	return err
}

const insertAccount = `-- name: InsertAccount :one
INSERT INTO accounts (
  name
) VALUES (
  $1
) RETURNING id
`

func (q *Queries) InsertAccount(ctx context.Context, name sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertAccount, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertBalance = `-- name: InsertBalance :exec
INSERT INTO balances (
  account, balance
) VALUES (
  $1, 0
)
`

func (q *Queries) InsertBalance(ctx context.Context, account int64) error {
	_, err := q.db.ExecContext(ctx, insertBalance, account)
	return err
}

const insertMint = `-- name: InsertMint :one
INSERT INTO mints (
  amount
) VALUES (
  $1
) RETURNING id
`

func (q *Queries) InsertMint(ctx context.Context, amount string) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertMint, amount)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertSpend = `-- name: InsertSpend :one
INSERT INTO spends (
  amount
) VALUES (
  $1
) RETURNING id
`

func (q *Queries) InsertSpend(ctx context.Context, amount string) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertSpend, amount)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertTransaction = `-- name: InsertTransaction :one
INSERT INTO transactions (
  account, mint, spend, transfer
) VALUES (
  $1, $2, $3, $4
) RETURNING id
`

type InsertTransactionParams struct {
	Account  int64
	Mint     sql.NullInt64
	Spend    sql.NullInt64
	Transfer sql.NullInt64
}

func (q *Queries) InsertTransaction(ctx context.Context, arg InsertTransactionParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertTransaction,
		arg.Account,
		arg.Mint,
		arg.Spend,
		arg.Transfer,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertTransfer = `-- name: InsertTransfer :one
INSERT INTO transfers (
  recipient, amount
) VALUES (
  $1, $2
) RETURNING id
`

type InsertTransferParams struct {
	Recipient int64
	Amount    string
}

func (q *Queries) InsertTransfer(ctx context.Context, arg InsertTransferParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertTransfer, arg.Recipient, arg.Amount)
	var id int64
	err := row.Scan(&id)
	return id, err
}
