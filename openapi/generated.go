// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// PostAccountsRegisterJSONBody defines parameters for PostAccountsRegister.
type PostAccountsRegisterJSONBody struct {
	Name string `json:"name"`
}

// PostAccountsIdMintJSONBody defines parameters for PostAccountsIdMint.
type PostAccountsIdMintJSONBody struct {
	Amount string `json:"amount"`
}

// PostAccountsRegisterJSONRequestBody defines body for PostAccountsRegister for application/json ContentType.
type PostAccountsRegisterJSONRequestBody PostAccountsRegisterJSONBody

// PostAccountsIdMintJSONRequestBody defines body for PostAccountsIdMint for application/json ContentType.
type PostAccountsIdMintJSONRequestBody PostAccountsIdMintJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /accounts/register)
	PostAccountsRegister(w http.ResponseWriter, r *http.Request)

	// (GET /accounts/{id}/balance)
	GetAccountsIdBalance(w http.ResponseWriter, r *http.Request, id int)

	// (POST /accounts/{id}/mint)
	PostAccountsIdMint(w http.ResponseWriter, r *http.Request, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAccountsRegister operation middleware
func (siw *ServerInterfaceWrapper) PostAccountsRegister(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAccountsRegister(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAccountsIdBalance operation middleware
func (siw *ServerInterfaceWrapper) GetAccountsIdBalance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAccountsIdBalance(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostAccountsIdMint operation middleware
func (siw *ServerInterfaceWrapper) PostAccountsIdMint(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAccountsIdMint(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/accounts/register", wrapper.PostAccountsRegister)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/accounts/{id}/balance", wrapper.GetAccountsIdBalance)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/accounts/{id}/mint", wrapper.PostAccountsIdMint)
	})

	return r
}

type PostAccountsRegisterRequestObject struct {
	Body *PostAccountsRegisterJSONRequestBody
}

type PostAccountsRegisterResponseObject interface {
	VisitPostAccountsRegisterResponse(w http.ResponseWriter) error
}

type PostAccountsRegister200JSONResponse struct {
	AccountId *int `json:"accountId,omitempty"`
}

func (response PostAccountsRegister200JSONResponse) VisitPostAccountsRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountsIdBalanceRequestObject struct {
	Id int `json:"id"`
}

type GetAccountsIdBalanceResponseObject interface {
	VisitGetAccountsIdBalanceResponse(w http.ResponseWriter) error
}

type GetAccountsIdBalance200JSONResponse struct {
	Balance *string `json:"balance,omitempty"`
}

func (response GetAccountsIdBalance200JSONResponse) VisitGetAccountsIdBalanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountsIdBalance404Response struct {
}

func (response GetAccountsIdBalance404Response) VisitGetAccountsIdBalanceResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostAccountsIdMintRequestObject struct {
	Id   int `json:"id"`
	Body *PostAccountsIdMintJSONRequestBody
}

type PostAccountsIdMintResponseObject interface {
	VisitPostAccountsIdMintResponse(w http.ResponseWriter) error
}

type PostAccountsIdMint200JSONResponse struct {
	TransactionId *int `json:"transactionId,omitempty"`
}

func (response PostAccountsIdMint200JSONResponse) VisitPostAccountsIdMintResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /accounts/register)
	PostAccountsRegister(ctx context.Context, request PostAccountsRegisterRequestObject) (PostAccountsRegisterResponseObject, error)

	// (GET /accounts/{id}/balance)
	GetAccountsIdBalance(ctx context.Context, request GetAccountsIdBalanceRequestObject) (GetAccountsIdBalanceResponseObject, error)

	// (POST /accounts/{id}/mint)
	PostAccountsIdMint(ctx context.Context, request PostAccountsIdMintRequestObject) (PostAccountsIdMintResponseObject, error)
}

type StrictHandlerFunc func(ctx context.Context, w http.ResponseWriter, r *http.Request, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostAccountsRegister operation middleware
func (sh *strictHandler) PostAccountsRegister(w http.ResponseWriter, r *http.Request) {
	var request PostAccountsRegisterRequestObject

	var body PostAccountsRegisterJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAccountsRegister(ctx, request.(PostAccountsRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAccountsRegister")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAccountsRegisterResponseObject); ok {
		if err := validResponse.VisitPostAccountsRegisterResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetAccountsIdBalance operation middleware
func (sh *strictHandler) GetAccountsIdBalance(w http.ResponseWriter, r *http.Request, id int) {
	var request GetAccountsIdBalanceRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccountsIdBalance(ctx, request.(GetAccountsIdBalanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccountsIdBalance")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAccountsIdBalanceResponseObject); ok {
		if err := validResponse.VisitGetAccountsIdBalanceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostAccountsIdMint operation middleware
func (sh *strictHandler) PostAccountsIdMint(w http.ResponseWriter, r *http.Request, id int) {
	var request PostAccountsIdMintRequestObject

	request.Id = id

	var body PostAccountsIdMintJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAccountsIdMint(ctx, request.(PostAccountsIdMintRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAccountsIdMint")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAccountsIdMintResponseObject); ok {
		if err := validResponse.VisitPostAccountsIdMintResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}
